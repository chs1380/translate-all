AWSTemplateFormatVersion: 2010-09-09
Description: >-
  translate-all
Transform:
- AWS::Serverless-2016-10-31
Parameters: 
  NumberOfIteration: 
    Type: Number
    Default: 60
  ConcurrentTranslateJob:
    Type: Number
    Default: 5       
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Translate-All
    Description: Enable Amazon Translate to translate all supporting documents file in one folder.
    Author: Cyrus Wong
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['Tranlate']
    HomePageUrl: https://github.com/wongcyrus/translate-all
    SemanticVersion: 1.0.0
    SourceCodeUrl: https://github.com/wongcyrus/translate-all
    
Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 300
    Handler: app.lambdaHandler
    Tracing: Active
    Environment:
      Variables:
        InputBucket: !Ref InputBucket
        OutputBucket: !Ref OutputBucket
Resources:
  TranlateQueue:
    Type: AWS::SQS::Queue
    
  StartTranslateStateMachine:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Lambda function that logs the payload of messages sent to an associated SQS queue.
      Runtime: nodejs12.x
      CodeUri: src/start-translate-state-machine/
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TranlateQueue.Arn
      MemorySize: 128
      Timeout: 25 # Chosen to be less than the default SQS Visibility Timeout of 30 seconds
      Policies:
        - AWSLambdaBasicExecutionRole  
        - StepFunctionsExecutionPolicy:
            StateMachineName:
              !GetAtt TranslateStateMachine.Name
      Environment:
        Variables:
          TranslateStateMachine: !Ref TranslateStateMachine

  Iterator:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/iterator/
      Policies: 
        - AWSLambdaBasicExecutionRole
 
  StartTranslateJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/start-translate-job/
      Policies: 
        - AWSLambdaBasicExecutionRole  
        - arn:aws:iam::aws:policy/TranslateFullAccess
        - S3WritePolicy:
            BucketName: !Ref OutputBucket
        - Version: '2012-10-17' # Policy Document
          Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource: !GetAtt DataAccessRole.Arn   
      Environment:
        Variables:
          DataAccessRoleArn: !GetAtt DataAccessRole.Arn   
          
  GetTextTranslationJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get-translate-job/
      Policies: 
        - AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/TranslateFullAccess

  CopyToTypeFolder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/copy-to-type-folder/
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref InputBucket

  CopyToParentFolder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/copy-to-parent-folder/
      Policies: 
        - AWSLambdaBasicExecutionRole
        - S3CrudPolicy:
            BucketName: !Ref OutputBucket
        - Statement:    
          - Effect: Allow
            Action:
              - s3:GetObjectTagging
              - s3:PutObjectTagging
            Resource: 
              - !Sub "arn:aws:s3:::${OutputBucket}/*"     
            
  DataAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - translate.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: 
                  - !Sub "arn:aws:s3:::${InputBucket}/*"
                  - !Sub "arn:aws:s3:::${OutputBucket}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: 
                  - !GetAtt InputBucket.Arn
                  - !GetAtt OutputBucket.Arn
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: 
                  - !Sub "arn:aws:s3:::${OutputBucket}/*"          
              
  TranslateStatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "SNS:Publish"
                Resource: 
                  - !Ref TranslateCompletionSNSTopic
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt [ StartTranslateJob, Arn ]
                  - !GetAtt [ GetTextTranslationJob, Arn ]
                  - !GetAtt [ Iterator, Arn ]
                  - !GetAtt [ CopyToTypeFolder, Arn ]
                  - !GetAtt [ CopyToParentFolder, Arn ]
           
  TranslateCompletionSNSTopic:
    Type: AWS::SNS::Topic
      
  TranslateStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Translate all documents State Machine",
              "StartAt": "Copy to Type Folder",
              "States": {
                "Copy to Type Folder": {
                    "Type": "Task",
                    "Resource": "${CopyToTypeFolder}",
                    "Next": "Translate All"
                }, 
                "Translate All": {
                  "Type": "Map",
                  "MaxConcurrency": ${ConcurrentTranslateJob},
                  "InputPath": "$",
                  "ItemsPath": "$.contentTypes",
                  "Parameters": {
                    "Id.$":  "$.JobName",
                    "JobName.$":  "$.JobName",
                    "InputBucket.$":  "$.InputBucket",
                    "InputS3Uri.$":  "$.InputS3Uri",
                    "OutputBucket.$":  "$.OutputBucket",
                    "SourceLanguageCode.$":  "$.SourceLanguageCode",
                    "TargetLanguageCodes.$": "$.TargetLanguageCodes",
                    "ContentType.$": "$$.Map.Item.Value"
                  },
                  "MaxConcurrency": 0,
                  "Next": "Copy to Parent Folder",                  
                  "Iterator": {
                    "StartAt": "Start Translate Job",
                    "States": {
                      "Start Translate Job": {
                        "Type": "Task",
                        "Resource": "${StartTranslateJob}",
                        "Next": "Configure Count",
                        "Retry": [ {
                            "ErrorEquals": [ "LimitExceededException", "ProvisionedThroughputExceededException"],
                            "IntervalSeconds": 10,
                            "BackoffRate": 2.0,
                            "MaxAttempts": 3
                        }]
                      },
                      "Configure Count": {
                        "Type": "Pass",
                        "InputPath": "$",
                        "Result": {
                            "count": ${NumberOfIteration},
                            "index": 0,
                            "step": 1
                        },
                        "ResultPath": "$.iterator",
                        "Next": "Iterator"
                      },
                      "Iterator": {
                          "Type": "Task",
                          "Resource": "${Iterator}",
                          "ResultPath": "$.iterator",
                          "Next": "Is Count Reached Or Succeeded"
                      },
                      "Is Count Reached Or Succeeded": {
                          "Type": "Choice",
                          "Choices": [
                              {
                                  "Variable": "$.iterator.continue",
                                  "BooleanEquals": true,
                                  "Next": "Get Translate Job"
                              }
                          ],
                          "Default": "Finish one type Translate Job"
                      },
                      "Get Translate Job": {
                          "Type": "Task",
                          "Resource": "${GetTextTranslationJob}",
                          "Next": "Wait 3 minute"
                      },
                      "Wait 3 minute": {
                        "Type": "Wait",
                        "Seconds": 180,
                        "Next": "Iterator"
                      },
                      "Finish one type Translate Job": {
                        "Type": "Pass",
                        "OutputPath": "$", 
                        "End": true
                      }
                    }
                  },
                  "ResultPath": "$"
                },
                "Copy to Parent Folder": {
                    "Type": "Task",
                    "Resource": "${CopyToParentFolder}",
                    "Next": "Finish All Translate Job"
                }, 
                "Finish All Translate Job": {
                  "Type": "Pass",
                  "OutputPath": "$", 
                  "Next": "Publish to SNS"
                }, 
                "Publish to SNS": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::sns:publish",
                  "Parameters": {
                   "TopicArn":"${TranslateCompletionSNSTopic}",
                   "Message.$": "$"
                  },
                  "Next": "SuccessState"
                 }, 
                "SuccessState": {
                  "Type": "Succeed"
                }
              }
            }
          - 
            Iterator: !GetAtt [ Iterator, Arn ]
            StartTranslateJob: !GetAtt [ StartTranslateJob, Arn ]
            GetTextTranslationJob: !GetAtt [ GetTextTranslationJob, Arn ]
            CopyToTypeFolder: !GetAtt [ CopyToTypeFolder, Arn ]
            CopyToParentFolder: !GetAtt [ CopyToParentFolder, Arn ]
            TranslateCompletionSNSTopic: !Ref TranslateCompletionSNSTopic       
            ConcurrentTranslateJob: !Ref ConcurrentTranslateJob
      RoleArn: !GetAtt [ TranslateStatesExecutionRole, Arn ]


  InputBucket:
    Type: AWS::S3::Bucket
  
  OutputBucket:
    Type: AWS::S3::Bucket      

Outputs:
  TranlateQueue:
    Description: Tranlate Job Queue
    Value: !Ref TranlateQueue
  TranslateCompletionSNSTopic:
    Description: Documents Set Translate Completion SNS Topic
    Value: !Ref TranslateCompletionSNSTopic  
  InputBucket:
    Description: Input Documents to be translated.
    Value: !Ref InputBucket
  OutputBucket:
    Description: translated output Documents.
    Value: !Ref OutputBucket    